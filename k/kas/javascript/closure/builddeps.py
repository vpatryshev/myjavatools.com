#!/usr/bin/python2.4
#
# Copyright 2006 Google Inc. All Rights Reserved.

"""This script is used to automatically generate the deps.js file.

It iterates over all .js files in the current directory tree and extracts the
provide and require lines from the js files
"""

__author__ = 'arv@google.com (Erik Arvidsson)'


import os
import re


class ClosureFile:
  "This class represents a js file with closure code."

  def __init__(self, fh):
    self.provides = []
    self.requires = []
    self.file_name = fh.name
    self.rel_path = re.sub('^\.\/', '', self.file_name.split('closure\\')[-1].
                           replace('\\', '/'))
    self._Parse(fh)

  def _GetRequiresFromLine(self, line):
    r = re.compile('goog.require\(([^\)]+)\)')
    if re.match(r, line):
      name = re.search(r, line).group(1)[1:-1] # remove quotes
      self.requires.append(name)

  def _GetProvidesFromLine(self, line):
    r = re.compile('goog.provide\(([^\)]+)\)')
    if re.match(r, line):
      name = re.search(r, line).group(1)[1:-1] # remove quotes
      self.provides.append(name)

  def _Parse(self, fh):
    for line in fh:
      self._GetRequiresFromLine(line)
      self._GetProvidesFromLine(line)

  def __str__(self):
    return '%s\nProvides:%s\nRequires:%s' % (self.rel_path,
                                             repr(self.provides),
                                             repr(self.requires))

  def __cmp__(self, other):
    # Make sure we get shorter paths before sub directories
    self_parts = self.rel_path.split('/')
    other_parts = other.rel_path.split('/')
    self_parts_length = len(self_parts)
    other_parts_length = len(other_parts)
    for i in range(0, min(self_parts_length, other_parts_length)):
      tmp = cmp(self_parts[i], other_parts[i])
      if tmp != 0:
        return tmp
    # otherwise just compare number of parts
    return cmp(self_parts_length, other_parts_length)


def IsJsFile(fn):
  return fn[-3:] == '.js'


# This returns false for a few known files and file patterns that we do not
# want to include in the outputted deps file.
def IsValidFile(fn):
  if fn == deps_file_name:
    return False
  r = re.compile(r'.+(\.|_|\-)(tmp|temp|test|backup|bck|old|draft)\.js$', re.I)
  return not re.match(r, fn)


def IterateFileTree(p):
  for (dir, folder, file_name) in os.walk(p):
    for js_file in filter(IsValidFile, filter(IsJsFile, file_name)):
      files.append(ClosureFile(file(os.path.join(dir, js_file))))


files = []

deps_file_name = 'deps.js'

js_copyright = """// Copyright 2006 Google Inc.
// All Rights Reserved.
//
// This file has been auto generated by builddeps.py
// Please do not edit

"""


def WriteDepsFile(path):
  try:
    fh = file(path, 'w')
    fh.write(js_copyright)
    for cf in files:
      fh.write('goog.addDependency(%s, %s, %s);\n' % (repr(cf.rel_path),
                                                      repr(cf.provides),
                                                      repr(cf.requires)))
  except IOError, (error_number, error_string):
    print "I/O error(%s): %s" % (error_number, error_string)


def main():
  IterateFileTree('.')
  files.sort()
  WriteDepsFile(deps_file_name)


if __name__ == '__main__':
  main()

